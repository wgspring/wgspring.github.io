<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wgspring</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wgspring.github.io/"/>
  <updated>2020-01-04T10:21:28.754Z</updated>
  <id>https://wgspring.github.io/</id>
  
  <author>
    <name>wgspring</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>g++的使用</title>
    <link href="https://wgspring.github.io/g/g++%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://wgspring.github.io/g/g++%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-04T02:20:38.546Z</published>
    <updated>2020-01-04T10:21:28.754Z</updated>
    
    <content type="html"><![CDATA[<p>以下教程只适合<code>linux</code>系统</p><h2 id="1-生成可执行文件"><a href="#1-生成可执行文件" class="headerlink" title="1. 生成可执行文件"></a>1. 生成可执行文件</h2><p>当要求生成可执行文件时，要求代码里面一定要包含main函数，为程序入口。</p><ol><li><p>如果为单文件，例如<code>main.cpp</code>，执行：</p><ul><li><p><code>g++ main.cpp</code></p><p>则会生成一个<code>a.out</code>文件，该文件即为可执行文件。终端执行<code>./a.out</code>即可</p></li></ul></li><li><p>如果希望生成的文件名可以指定，则可以使用<code>-o</code>参数执行：</p><ul><li><p><code>g++ main.cpp -o main</code></p><p>其中<code>main</code>即为你期望生成的文件名</p></li></ul></li><li><p>如果为多个文件，可以使用<code>g++ *.cpp</code>来通配所有cpp文件</p></li></ol><h2 id="2-生成对象文件-–-o"><a href="#2-生成对象文件-–-o" class="headerlink" title="2. 生成对象文件 – *.o"></a>2. 生成对象文件 – *.o</h2><p>选项 -c 用来告诉编译器编译源代码但不要执行链接，输出结果为对象文件。文件默认名与源码文件名相同，只是将其后缀变为 .o。</p><p><code>g++ -c main.cpp</code></p><p>上述命令会生成<code>main.o</code></p><h3 id="2-1-对象文件到可执行文件"><a href="#2-1-对象文件到可执行文件" class="headerlink" title="2.1. 对象文件到可执行文件"></a>2.1. 对象文件到可执行文件</h3><p>命令 g++ 能够直接识别 .o 文件并将其作为输入文件传递给链接器。</p><p><code>g++ main.o</code>或则<code>g++ main.o -o main</code></p><p>生成可执行文件<code>a.out</code>或则<code>main</code></p><h2 id="3-编译预处理"><a href="#3-编译预处理" class="headerlink" title="3. 编译预处理"></a>3. 编译预处理</h2><p>选项 -E 使 g++ 将源代码用编译预处理器处理后不再执行其他动作。</p><p><code>g++ -E main.cpp</code></p><p>上述命令不会生成文件，只会打印预处理的信息，如果要保存到文件可以附加使用<code>-o</code>选项</p><h2 id="4-生成汇编指令"><a href="#4-生成汇编指令" class="headerlink" title="4. 生成汇编指令"></a>4. 生成汇编指令</h2><p>选项 -S 指示编译器将程序编译成汇编语言，输出汇编语言代码而後结束。</p><p><code>g++ -S main.cpp</code></p><h2 id="5-生成静态库"><a href="#5-生成静态库" class="headerlink" title="5. 生成静态库"></a>5. 生成静态库</h2><p>静态库是编译器生成的一系列对象文件(<code>*.o文件</code>)的集合。链接一个程序时用库中的对象文件还是目录中的对象文件都是一样的。库中的成员包括普通函数，类定义，类的对象实例等等。静态库的另一个名字叫归档文件(archive)，管理这种归档文件的工具叫 ar 。</p><p><code>ar -r mylib.a object1.o object2.o</code></p><h3 id="5-1-静态库到可执行文件"><a href="#5-1-静态库到可执行文件" class="headerlink" title="5.1. 静态库到可执行文件"></a>5.1. 静态库到可执行文件</h3><p>命令 g++ 能够直接识别静态库 <code>.a</code> 文件并将其作为输入文件传递给链接器。</p><p><code>g++ mylib.a</code></p><h2 id="6-生成动态库"><a href="#6-生成动态库" class="headerlink" title="6. 生成动态库"></a>6. 生成动态库</h2><p><code>g++ one.cpp two.cpp three.cpp -fPIC -shared -o libtest.so</code></p><ul><li><p><code>-shared</code>：该选项指定生成动态连接库（让连接器生成T类型的导出符号表，有时候也生成弱连接W类型的导出符号），不用该标志外部程序无法连接。相当于一个可执行文件</p></li><li><p><code>-fPIC</code>：表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的。</p></li></ul><h3 id="6-1-动态库到可执行文件"><a href="#6-1-动态库到可执行文件" class="headerlink" title="6.1. 动态库到可执行文件"></a>6.1. 动态库到可执行文件</h3><p>例如讲<code>main.cpp</code>和动态库<code>libtest.so</code>一起链接</p><p><code>g++ main.cpp -L. -ltest -o main</code></p><ul><li><code>-L.</code>：表示要连接的库在当前目录中，<code>-L</code>指定动态库目录，<code>.</code>表示当前目录</li><li><code>-ltest</code>：编译器查找动态连接库时有隐含的命名规则，即在给出的名字前面加上lib，后面加上.so来确定库的名称。<code>-l</code>指定连接的动态库名称，<code>test</code>表示<code>libtest.so</code>这个文件。</li></ul><h3 id="6-2-查看可执行程序链接了哪些库"><a href="#6-2-查看可执行程序链接了哪些库" class="headerlink" title="6.2. 查看可执行程序链接了哪些库"></a>6.2. 查看可执行程序链接了哪些库</h3><p><code>ldd main</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下教程只适合&lt;code&gt;linux&lt;/code&gt;系统&lt;/p&gt;
&lt;h2 id=&quot;1-生成可执行文件&quot;&gt;&lt;a href=&quot;#1-生成可执行文件&quot; class=&quot;headerlink&quot; title=&quot;1. 生成可执行文件&quot;&gt;&lt;/a&gt;1. 生成可执行文件&lt;/h2&gt;&lt;p&gt;当要求生成
      
    
    </summary>
    
    
      <category term="g++" scheme="https://wgspring.github.io/categories/g/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo书写文档插入代码块和引用</title>
    <link href="https://wgspring.github.io/hexo/%E6%8F%92%E4%BB%B6%E6%A0%87%E7%AD%BE/hexo%E4%B9%A6%E5%86%99%E6%96%87%E6%A1%A3%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%92%8C%E5%BC%95%E7%94%A8/"/>
    <id>https://wgspring.github.io/hexo/%E6%8F%92%E4%BB%B6%E6%A0%87%E7%AD%BE/hexo%E4%B9%A6%E5%86%99%E6%96%87%E6%A1%A3%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81%E5%9D%97%E5%92%8C%E5%BC%95%E7%94%A8/</id>
    <published>2019-12-31T14:50:55.000Z</published>
    <updated>2020-01-04T06:07:30.929Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo编写博客时，使用Markdown语法来插入代码、引用、图片时有时候并不起作用，推荐使用hexo标签插件来实现相同功能。</p><h2 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [option: value] %&#125;</span><br><span class="line">代码内容</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p><code>[..]</code>内为可选项。其中 <code>[option: value]</code>有以下选项:</p><table><thead><tr><th>Extra Options</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>line_number</code></td><td>Show line number</td><td><code>true</code></td></tr><tr><td><code>highlight</code></td><td>Enable code highlighting</td><td><code>true</code></td></tr><tr><td><code>first_line</code></td><td>Specify the first line number</td><td><code>1</code></td></tr><tr><td><code>mark</code></td><td>Line highlight specific line(s), each value separated by a comma. Specify number range using a dashExample: <code>mark:1,4-7,10</code> will mark line 1, 4 to 7 and 10.</td><td></td></tr><tr><td><code>wrap</code></td><td>Wrap the code block in <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table" target="_blank" rel="noopener"><code>&lt;table&gt;</code></a></td><td><code>true</code></td></tr></tbody></table><h2 id="插入引用"><a href="#插入引用" class="headerlink" title="插入引用"></a>插入引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] %&#125;</span><br><span class="line">引用内容</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p><code>[..]</code>内为可选项。</p><h2 id="插入图片和链接"><a href="#插入图片和链接" class="headerlink" title="插入图片和链接"></a>插入图片和链接</h2><p>要想能够正确使用，需要将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>插入路径 <code> {% asset_path 同名文件夹下的文件路径 %} </code></li><li>插入图片 <code> {% asset_img 同名文件夹下的文件路径 [title] %} </code></li><li>插入链接 <code> {% asset_link 同名文件夹下的文件路径 [title] %} </code></li></ul><h2 id="插入url链接"><a href="#插入url链接" class="headerlink" title="插入url链接"></a>插入url链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link title url %&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>另外还有一起其他不常用插件标签 <a href="https://hexo.io/zh-cn/docs/tag-plugins" title="" target="">传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用hexo编写博客时，使用Markdown语法来插入代码、引用、图片时有时候并不起作用，推荐使用hexo标签插件来实现相同功能。&lt;/p&gt;
&lt;h2 id=&quot;插入代码块&quot;&gt;&lt;a href=&quot;#插入代码块&quot; class=&quot;headerlink&quot; title=&quot;插入代码块&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://wgspring.github.io/categories/hexo/"/>
    
      <category term="插件标签" scheme="https://wgspring.github.io/categories/hexo/%E6%8F%92%E4%BB%B6%E6%A0%87%E7%AD%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo书写文档插入图片或链接</title>
    <link href="https://wgspring.github.io/hexo/%E6%8F%92%E4%BB%B6%E6%A0%87%E7%AD%BE/hexo%E4%B9%A6%E5%86%99%E6%96%87%E6%A1%A3%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%88%96%E9%93%BE%E6%8E%A5/"/>
    <id>https://wgspring.github.io/hexo/%E6%8F%92%E4%BB%B6%E6%A0%87%E7%AD%BE/hexo%E4%B9%A6%E5%86%99%E6%96%87%E6%A1%A3%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%88%96%E9%93%BE%E6%8E%A5/</id>
    <published>2019-12-29T13:18:03.000Z</published>
    <updated>2020-01-04T04:20:36.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启文章资源文件夹"><a href="#开启文章资源文件夹" class="headerlink" title="开启文章资源文件夹"></a>开启文章资源文件夹</h2><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="插入资源"><a href="#插入资源" class="headerlink" title="插入资源"></a>插入资源</h2><p>当资源文件管理功能打开后，<code>Hexo</code>将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。其中<code>[..]</code>内为可选项。</p><ul><li>插入路径 <code> {% asset_path 同名文件夹下的文件路径 %} </code></li><li>插入图片 <code> {% asset_img 同名文件夹下的文件路径 [title] %} </code></li><li>插入链接 <code> {% asset_link 同名文件夹下的文件路径 [title] %} </code></li></ul><p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中。然后插入</p><p><code>{% asset_img example.jpg This is an example image %}</code></p><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>如果插入的是url链接和图片，则规则和原Markdown规则一致。</p><ul><li>插入图片：<code>![title](url)</code></li><li>插入链接：<code>[title](url)</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开启文章资源文件夹&quot;&gt;&lt;a href=&quot;#开启文章资源文件夹&quot; class=&quot;headerlink&quot; title=&quot;开启文章资源文件夹&quot;&gt;&lt;/a&gt;开启文章资源文件夹&lt;/h2&gt;&lt;p&gt;对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://wgspring.github.io/categories/hexo/"/>
    
      <category term="插件标签" scheme="https://wgspring.github.io/categories/hexo/%E6%8F%92%E4%BB%B6%E6%A0%87%E7%AD%BE/"/>
    
    
  </entry>
  
</feed>
